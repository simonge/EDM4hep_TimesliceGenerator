name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/eic/eic_ci:nightly
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Environment diagnostics
        run: |
          echo "=== Container environment diagnostics ==="
          echo "Operating System:"
          cat /etc/os-release
          echo ""
          
          echo "Available system directories:"
          ls -la / || true
          echo ""
          
          echo "PATH environment:"
          echo "$PATH"
          echo ""
          
          echo "Searching for cmake in filesystem:"
          find / -name "cmake" -type f 2>/dev/null | head -10 || echo "No cmake found"
          echo ""
          
          echo "Checking standard cmake locations:"
          ls -la /usr/bin/cmake 2>/dev/null || echo "/usr/bin/cmake not found"
          ls -la /usr/local/bin/cmake 2>/dev/null || echo "/usr/local/bin/cmake not found"
          ls -la /opt/*/bin/cmake 2>/dev/null || echo "No cmake found in /opt/*/bin/"
          echo ""
          
          echo "Searching for package managers:"
          which apt 2>/dev/null || echo "apt not found"
          which yum 2>/dev/null || echo "yum not found"
          which dnf 2>/dev/null || echo "dnf not found"
          which apk 2>/dev/null || echo "apk not found"
          
      - name: Setup EIC Environment
        run: |
          echo "=== Setting up EIC environment ==="
          
          # Try to install cmake if package manager is available
          if which apt >/dev/null 2>&1; then
            echo "Using apt to install cmake"
            apt update && apt install -y cmake || echo "Failed to install cmake with apt"
          elif which yum >/dev/null 2>&1; then
            echo "Using yum to install cmake"
            yum install -y cmake || echo "Failed to install cmake with yum"
          elif which apk >/dev/null 2>&1; then
            echo "Using apk to install cmake"
            apk add cmake || echo "Failed to install cmake with apk"
          else
            echo "No package manager found to install cmake"
          fi
          
          # Check if cmake is available after potential installation
          which cmake && cmake --version || echo "CMAKE STILL NOT FOUND after package manager attempt"
          
          # Try sourcing eic shell environment
          if [ -f "/usr/local/bin/eic-shell" ]; then
            echo "Found eic-shell, trying to source it"
            source /usr/local/bin/eic-shell || echo "Failed to source eic-shell"
          fi
          
          # Source standard EIC setup scripts  
          if [ -f "/opt/detector/setup.sh" ]; then
            echo "Sourcing /opt/detector/setup.sh"
            source /opt/detector/setup.sh || echo "Failed to source detector setup"
          fi
          
          if [ -f "/opt/software/setup.sh" ]; then
            echo "Sourcing /opt/software/setup.sh"
            source /opt/software/setup.sh || echo "Failed to source software setup"
          fi
          
          # Set basic environment paths
          export PATH="/usr/local/bin:/usr/bin:/bin:$PATH"
          export CMAKE_PREFIX_PATH="/usr/local:/opt/detector:/opt/software:${CMAKE_PREFIX_PATH:-}"
          
          # Final cmake check
          echo "Final cmake check:"
          which cmake && cmake --version || echo "CMAKE NOT AVAILABLE"
          
          # Save environment for next steps
          echo "PATH=/usr/local/bin:/usr/bin:/bin:$PATH" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/usr/local:/opt/detector:/opt/software:${CMAKE_PREFIX_PATH:-}" >> $GITHUB_ENV

      - name: Configure
        run: |
          echo "=== Configuring with cmake ==="
          echo "Using cmake at: $(which cmake)"
          cmake --version
          echo "CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH" 
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          
          echo "Configuring project..."
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: Build
        run: |
          echo "=== Building project ==="
          echo "Using cmake at: $(which cmake)"
          cmake --build build -j"$(nproc)" --verbose

      - name: Test
        run: |
          echo "=== Running tests ==="
          ctest --test-dir build --output-on-failure

      - name: Run Application
        run: |
          echo "=== Running standalone timeslice merger ==="
          cd build
          echo "Current directory contents:"
          ls -la
          echo "Looking for executable:"
          find . -name "*standalone*" -o -name "*merger*" -o -name "*timeslice*" -type f -executable
          echo "Running with CI config..."
          ./timeslice_merger --config ../config_ci.yml || echo "Application run completed with exit code $?"